// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test_Smart.Configuration;

#nullable disable

namespace Test_Smart.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Test_Smart.Entity.EquipmentType.EquipmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AreaPerUnit")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd5fbc9e-f75c-4de7-a45c-de3fadbb14b4"),
                            AreaPerUnit = 50.0,
                            Code = "EQ001",
                            CreationDate = new DateTime(2024, 12, 12, 17, 47, 46, 300, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Machine A"
                        },
                        new
                        {
                            Id = new Guid("78e6bacc-22fe-4cc9-9e2b-b2fef1dc1b62"),
                            AreaPerUnit = 70.0,
                            Code = "EQ002",
                            CreationDate = new DateTime(2024, 12, 12, 17, 47, 46, 300, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Machine B"
                        });
                });

            modelBuilder.Entity("Test_Smart.Entity.PlacementContract.PlacementContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EquipmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductionFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("ProductionFacilityId");

                    b.ToTable("PlacementContracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("337cb304-09ae-4f46-973d-0718ef2a6e03"),
                            CreationDate = new DateTime(2024, 12, 12, 17, 47, 46, 300, DateTimeKind.Utc),
                            Deleted = false,
                            EquipmentTypeId = new Guid("fd5fbc9e-f75c-4de7-a45c-de3fadbb14b4"),
                            ProductionFacilityId = new Guid("40d0a731-9c98-4126-9464-7a35100c59b8"),
                            Quantity = 10
                        },
                        new
                        {
                            Id = new Guid("acaf647a-920b-4b88-95e5-4c76a990198c"),
                            CreationDate = new DateTime(2024, 12, 12, 17, 47, 46, 300, DateTimeKind.Utc),
                            Deleted = false,
                            EquipmentTypeId = new Guid("78e6bacc-22fe-4cc9-9e2b-b2fef1dc1b62"),
                            ProductionFacilityId = new Guid("5f29a2ec-2936-4720-938e-54022329593c"),
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("Test_Smart.Entity.ProductionFacility.ProductionFacility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("StandardArea")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ProductionFacilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40d0a731-9c98-4126-9464-7a35100c59b8"),
                            Code = "FAC001",
                            CreationDate = new DateTime(2024, 12, 12, 17, 47, 46, 300, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Factory A",
                            StandardArea = 1000.0
                        },
                        new
                        {
                            Id = new Guid("5f29a2ec-2936-4720-938e-54022329593c"),
                            Code = "FAC002",
                            CreationDate = new DateTime(2024, 12, 12, 17, 47, 46, 300, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Factory B",
                            StandardArea = 800.0
                        });
                });

            modelBuilder.Entity("Test_Smart.Entity.PlacementContract.PlacementContract", b =>
                {
                    b.HasOne("Test_Smart.Entity.EquipmentType.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test_Smart.Entity.ProductionFacility.ProductionFacility", "ProductionFacility")
                        .WithMany()
                        .HasForeignKey("ProductionFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");

                    b.Navigation("ProductionFacility");
                });
#pragma warning restore 612, 618
        }
    }
}
